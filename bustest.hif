HIF003
--
-- Copyright (C) 1988-2002 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
	extractor8.v
	{
		extractor8 [] []
		{
			34 [] [];
		}
	}
	compressor16.v
	{
		compressor16 [] []
		{
			22 [] [];
		}
	}
	zero.tdf
	{
		zero [USE_LPM_FOR_AHDL_OPERATORS] [lpm_constant.inc]
		{
			8 [USE_LPM_FOR_AHDL_OPERATORS=OFF] [result0];
		}
	}
	moris_computer.gdf
	{
		moris_computer [] []
		{
			1 [] [];
		}
	}
	alu.gdf
	{
		alu [] []
		{
			2 [] [];
		}
	}
	alulayer.gdf
	{
		alulayer [] []
		{
			3 [] [];
		}
	}
	logiclayer.gdf
	{
		logiclayer [] []
		{
			4 [] [];
		}
	}
	mux4x1.gdf
	{
		mux4x1 [] []
		{
			5 [] [];
		}
	}
	arithmeticlayer.gdf
	{
		arithmeticlayer [] []
		{
			6 [] [];
		}
	}
	fulladder.gdf
	{
		fulladder [] []
		{
			7 [] [];
		}
	}
	lpm_constant.tdf
	{
		lpm_constant [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH,LPM_CVALUE] []
		{
			9 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=1,LPM_CVALUE=0] [result0];
		}
	}
	ar.gdf
	{
		ar [] []
		{
			10 [] [];
		}
	}
	4bitregister.gdf
	{
		4bitregister [] []
		{
			11 [] [];
		}
	}
	ha.gdf
	{
		ha [] []
		{
			12 [] [];
		}
	}
	mux2x1.gdf
	{
		mux2x1 [] []
		{
			13 [] [];
		}
	}
	d.tdf
	{
		d [USE_LPM_FOR_AHDL_OPERATORS] [lpm_ff.inc]
		{
			14 [USE_LPM_FOR_AHDL_OPERATORS=OFF] [sclr,data,clock,enable,q];
		}
	}
	lpm_ff.tdf
	{
		lpm_ff [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH,LPM_AVALUE=0,LPM_SVALUE=0,LPM_FFTYPE=DFF,DEVICE_FAMILY] [aglobal.inc,lpm_constant.inc]
		{
			15 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=1,LPM_AVALUE=0,LPM_SVALUE=0,LPM_FFTYPE=DFF,DEVICE_FAMILY=ACEX1K] [sclr,enable,clock,data0,q0];
		}
	}
	pc.gdf
	{
		pc [] []
		{
			16 [] [];
		}
	}
	dr.gdf
	{
		dr [] []
		{
			17 [] [];
		}
	}
	ac.gdf
	{
		ac [] []
		{
			18 [] [];
		}
	}
	ir.gdf
	{
		ir [] []
		{
			19 [] [];
		}
	}
	tr.gdf
	{
		tr [] []
		{
			20 [] [];
		}
	}
	mux8x1.gdf
	{
		mux8x1 [] []
		{
			21 [] [];
		}
	}
	extractor3.v
	{
		extractor3 [] []
		{
			23 [] [];
		}
	}
	compressor12.v
	{
		compressor12 [] []
		{
			24 [] [];
		}
	}
	extractor16.v
	{
		extractor16 [] []
		{
			25 [] [];
		}
	}
	basic_ram.v
	{
		basic_ram [] [lpm_ram_dp.inc]
		{
			26 [] [];
		}
	}
	lpm_ram_dp.tdf
	{
		lpm_ram_dp [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH,LPM_WIDTHAD,LPM_NUMWORDS,LPM_INDATA=REGISTERED,LPM_RDADDRESS_CONTROL=REGISTERED,LPM_WRADDRESS_CONTROL=REGISTERED,LPM_OUTDATA=REGISTERED,LPM_FILE=NO_FILE,DEVICE_FAMILY] [aglobal.inc,lpm_decode.inc,lpm_mux.inc,altdpram.inc]
		{
			27 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=16,LPM_WIDTHAD=12,LPM_INDATA=UNREGISTERED,LPM_RDADDRESS_CONTROL=UNREGISTERED,LPM_WRADDRESS_CONTROL=UNREGISTERED,LPM_OUTDATA=UNREGISTERED,LPM_FILE=NO_FILE,DEVICE_FAMILY=ACEX1K] [wren,data15,data14,data13,data12,data11,data10,data9,data8,data7,data6,data5,data4,data3,data2,data1,data0,rdaddress11,rdaddress10,rdaddress9,rdaddress8,rdaddress7,rdaddress6,rdaddress5,rdaddress4,rdaddress3,rdaddress2,rdaddress1,rdaddress0,wraddress11,wraddress10,wraddress9,wraddress8,wraddress7,wraddress6,wraddress5,wraddress4,wraddress3,wraddress2,wraddress1,wraddress0,q15,q14,q13,q12,q11,q10,q9,q8,q7,q6,q5,q4,q3,q2,q1,q0];
		}
	}
	altdpram.tdf
	{
		altdpram [USE_LPM_FOR_AHDL_OPERATORS,WIDTH,WIDTHAD,NUMWORDS,FILE=NO_FILE,LPM_FILE=NO_FILE,INDATA_REG=INCLOCK,INDATA_ACLR=ON,WRADDRESS_REG=INCLOCK,WRADDRESS_ACLR=ON,WRCONTROL_REG=INCLOCK,WRCONTROL_ACLR=ON,RDADDRESS_REG=OUTCLOCK,RDADDRESS_ACLR=ON,RDCONTROL_REG=OUTCLOCK,RDCONTROL_ACLR=ON,OUTDATA_REG=UNREGISTERED,OUTDATA_ACLR=ON,USE_EAB=ON,DEVICE_FAMILY] [aglobal.inc,a_hdffe.inc,lpm_mux.inc,lpm_decode.inc,memmodes.inc]
		{
			28 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=16,WIDTHAD=12,NUMWORDS=4096,FILE=NO_FILE,LPM_FILE=NO_FILE,INDATA_REG=UNREGISTERED,INDATA_ACLR=ON,WRADDRESS_REG=UNREGISTERED,WRADDRESS_ACLR=ON,WRCONTROL_REG=UNREGISTERED,WRCONTROL_ACLR=ON,RDADDRESS_REG=UNREGISTERED,RDADDRESS_ACLR=ON,RDCONTROL_REG=UNREGISTERED,RDCONTROL_ACLR=ON,OUTDATA_REG=UNREGISTERED,OUTDATA_ACLR=ON,USE_EAB=ON,DEVICE_FAMILY=ACEX1K] [rdaddress0,rdaddress1,rdaddress2,rdaddress3,rdaddress4,rdaddress5,rdaddress6,rdaddress7,rdaddress8,rdaddress9,rdaddress10,rdaddress11,wraddress0,wraddress1,wraddress2,wraddress3,wraddress4,wraddress5,wraddress6,wraddress7,wraddress8,wraddress9,wraddress10,wraddress11,data0,data1,data2,data3,data4,data5,data6,data7,data8,data9,data10,data11,data12,data13,data14,data15,wren,q0,q1,q2,q3,q4,q5,q6,q7,q8,q9,q10,q11,q12,q13,q14,q15];
		}
	}
	lpm_decode.tdf
	{
		lpm_decode [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH,LPM_DECODES,LPM_PIPELINE=0,CASCADE_CHAIN=MANUAL,DEVICE_FAMILY] [aglobal.inc,lpm_constant.inc,lpm_compare.inc,altshift.inc,declut.inc]
		{
			29 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=1,LPM_DECODES=2,LPM_PIPELINE=0,CASCADE_CHAIN=IGNORE,DEVICE_FAMILY=ACEX1K] [enable,data0,eq0,eq1];
		}
	}
	altshift.tdf
	{
		altshift [USE_LPM_FOR_AHDL_OPERATORS,WIDTH=4,DEPTH=0] []
		{
			30 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=2,DEPTH=0] [data0,data1,result0,result1];
			32 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=16,DEPTH=0] [data0,data1,data2,data3,data4,data5,data6,data7,data8,data9,data10,data11,data12,data13,data14,data15,result0,result1,result2,result3,result4,result5,result6,result7,result8,result9,result10,result11,result12,result13,result14,result15];
		}
	}
	lpm_mux.tdf
	{
		lpm_mux [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH,LPM_SIZE,LPM_WIDTHS,LPM_PIPELINE=0] [altshift.inc,bypassff.inc,muxlut.inc]
		{
			31 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=16,LPM_SIZE=2,LPM_WIDTHS=1,LPM_PIPELINE=0] [sel0,data0_0,data0_1,data0_2,data0_3,data0_4,data0_5,data0_6,data0_7,data0_8,data0_9,data0_10,data0_11,data0_12,data0_13,data0_14,data0_15,data1_0,data1_1,data1_2,data1_3,data1_4,data1_5,data1_6,data1_7,data1_8,data1_9,data1_10,data1_11,data1_12,data1_13,data1_14,data1_15,result0,result1,result2,result3,result4,result5,result6,result7,result8,result9,result10,result11,result12,result13,result14,result15];
		}
	}
	muxlut.tdf
	{
		muxlut [USE_LPM_FOR_AHDL_OPERATORS,SIZE,LEVEL,TOT_LEVELS,LATENCY,REM_LATENCY,LOCAL=0,CASCADE_CHAIN] [altshift.inc,muxlut.inc]
		{
			33 [USE_LPM_FOR_AHDL_OPERATORS=OFF,SIZE=2,LEVEL=0,TOT_LEVELS=1,LATENCY=0,LOCAL=0,CASCADE_CHAIN=IGNORE] [select0,data0,data1,result];
		}
	}
	bustest.gdf
	{
		bustest [] []
		{
			0 [] [];
		}
	}
}
TREE
{
	bustest::(0,0):(0): bustest.gdf
	{
		moris_computer::(0,0):(1): moris_computer.gdf
		{
			alu:2:(0,0):(1): alu.gdf
			{
				alulayer:3:(0,0):(80): alulayer.gdf
				{
					logiclayer:4:(0,0):(2): logiclayer.gdf
					{
						mux4x1:5:(0,0):(2): mux4x1.gdf;
					}
					mux4x1:5:(0,0):(3): mux4x1.gdf;
					arithmeticlayer:6:(0,0):(8): arithmeticlayer.gdf
					{
						fulladder:7:(0,0):(12): fulladder.gdf;
						mux4x1:5:(0,0):(6): mux4x1.gdf;
						zero:8:(0,0):(3): zero.tdf
						{
							lpm_constant:9:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
						}
					}
				}
				alulayer:3:(0,0):(1): alulayer.gdf
				{
					logiclayer:4:(0,0):(2): logiclayer.gdf
					{
						mux4x1:5:(0,0):(2): mux4x1.gdf;
					}
					mux4x1:5:(0,0):(3): mux4x1.gdf;
					arithmeticlayer:6:(0,0):(8): arithmeticlayer.gdf
					{
						fulladder:7:(0,0):(12): fulladder.gdf;
						mux4x1:5:(0,0):(6): mux4x1.gdf;
						zero:8:(0,0):(3): zero.tdf
						{
							lpm_constant:9:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
						}
					}
				}
				alulayer:3:(0,0):(100): alulayer.gdf
				{
					logiclayer:4:(0,0):(2): logiclayer.gdf
					{
						mux4x1:5:(0,0):(2): mux4x1.gdf;
					}
					mux4x1:5:(0,0):(3): mux4x1.gdf;
					arithmeticlayer:6:(0,0):(8): arithmeticlayer.gdf
					{
						fulladder:7:(0,0):(12): fulladder.gdf;
						mux4x1:5:(0,0):(6): mux4x1.gdf;
						zero:8:(0,0):(3): zero.tdf
						{
							lpm_constant:9:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
						}
					}
				}
				alulayer:3:(0,0):(84): alulayer.gdf
				{
					logiclayer:4:(0,0):(2): logiclayer.gdf
					{
						mux4x1:5:(0,0):(2): mux4x1.gdf;
					}
					mux4x1:5:(0,0):(3): mux4x1.gdf;
					arithmeticlayer:6:(0,0):(8): arithmeticlayer.gdf
					{
						fulladder:7:(0,0):(12): fulladder.gdf;
						mux4x1:5:(0,0):(6): mux4x1.gdf;
						zero:8:(0,0):(3): zero.tdf
						{
							lpm_constant:9:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
						}
					}
				}
				alulayer:3:(0,0):(88): alulayer.gdf
				{
					logiclayer:4:(0,0):(2): logiclayer.gdf
					{
						mux4x1:5:(0,0):(2): mux4x1.gdf;
					}
					mux4x1:5:(0,0):(3): mux4x1.gdf;
					arithmeticlayer:6:(0,0):(8): arithmeticlayer.gdf
					{
						fulladder:7:(0,0):(12): fulladder.gdf;
						mux4x1:5:(0,0):(6): mux4x1.gdf;
						zero:8:(0,0):(3): zero.tdf
						{
							lpm_constant:9:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
						}
					}
				}
				alulayer:3:(0,0):(92): alulayer.gdf
				{
					logiclayer:4:(0,0):(2): logiclayer.gdf
					{
						mux4x1:5:(0,0):(2): mux4x1.gdf;
					}
					mux4x1:5:(0,0):(3): mux4x1.gdf;
					arithmeticlayer:6:(0,0):(8): arithmeticlayer.gdf
					{
						fulladder:7:(0,0):(12): fulladder.gdf;
						mux4x1:5:(0,0):(6): mux4x1.gdf;
						zero:8:(0,0):(3): zero.tdf
						{
							lpm_constant:9:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
						}
					}
				}
				alulayer:3:(0,0):(96): alulayer.gdf
				{
					logiclayer:4:(0,0):(2): logiclayer.gdf
					{
						mux4x1:5:(0,0):(2): mux4x1.gdf;
					}
					mux4x1:5:(0,0):(3): mux4x1.gdf;
					arithmeticlayer:6:(0,0):(8): arithmeticlayer.gdf
					{
						fulladder:7:(0,0):(12): fulladder.gdf;
						mux4x1:5:(0,0):(6): mux4x1.gdf;
						zero:8:(0,0):(3): zero.tdf
						{
							lpm_constant:9:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
						}
					}
				}
				alulayer:3:(0,0):(104): alulayer.gdf
				{
					logiclayer:4:(0,0):(2): logiclayer.gdf
					{
						mux4x1:5:(0,0):(2): mux4x1.gdf;
					}
					mux4x1:5:(0,0):(3): mux4x1.gdf;
					arithmeticlayer:6:(0,0):(8): arithmeticlayer.gdf
					{
						fulladder:7:(0,0):(12): fulladder.gdf;
						mux4x1:5:(0,0):(6): mux4x1.gdf;
						zero:8:(0,0):(3): zero.tdf
						{
							lpm_constant:9:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
						}
					}
				}
				alulayer:3:(0,0):(108): alulayer.gdf
				{
					logiclayer:4:(0,0):(2): logiclayer.gdf
					{
						mux4x1:5:(0,0):(2): mux4x1.gdf;
					}
					mux4x1:5:(0,0):(3): mux4x1.gdf;
					arithmeticlayer:6:(0,0):(8): arithmeticlayer.gdf
					{
						fulladder:7:(0,0):(12): fulladder.gdf;
						mux4x1:5:(0,0):(6): mux4x1.gdf;
						zero:8:(0,0):(3): zero.tdf
						{
							lpm_constant:9:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
						}
					}
				}
				alulayer:3:(0,0):(64): alulayer.gdf
				{
					logiclayer:4:(0,0):(2): logiclayer.gdf
					{
						mux4x1:5:(0,0):(2): mux4x1.gdf;
					}
					mux4x1:5:(0,0):(3): mux4x1.gdf;
					arithmeticlayer:6:(0,0):(8): arithmeticlayer.gdf
					{
						fulladder:7:(0,0):(12): fulladder.gdf;
						mux4x1:5:(0,0):(6): mux4x1.gdf;
						zero:8:(0,0):(3): zero.tdf
						{
							lpm_constant:9:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
						}
					}
				}
				alulayer:3:(0,0):(69): alulayer.gdf
				{
					logiclayer:4:(0,0):(2): logiclayer.gdf
					{
						mux4x1:5:(0,0):(2): mux4x1.gdf;
					}
					mux4x1:5:(0,0):(3): mux4x1.gdf;
					arithmeticlayer:6:(0,0):(8): arithmeticlayer.gdf
					{
						fulladder:7:(0,0):(12): fulladder.gdf;
						mux4x1:5:(0,0):(6): mux4x1.gdf;
						zero:8:(0,0):(3): zero.tdf
						{
							lpm_constant:9:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
						}
					}
				}
				alulayer:3:(0,0):(73): alulayer.gdf
				{
					logiclayer:4:(0,0):(2): logiclayer.gdf
					{
						mux4x1:5:(0,0):(2): mux4x1.gdf;
					}
					mux4x1:5:(0,0):(3): mux4x1.gdf;
					arithmeticlayer:6:(0,0):(8): arithmeticlayer.gdf
					{
						fulladder:7:(0,0):(12): fulladder.gdf;
						mux4x1:5:(0,0):(6): mux4x1.gdf;
						zero:8:(0,0):(3): zero.tdf
						{
							lpm_constant:9:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
						}
					}
				}
				alulayer:3:(0,0):(77): alulayer.gdf
				{
					logiclayer:4:(0,0):(2): logiclayer.gdf
					{
						mux4x1:5:(0,0):(2): mux4x1.gdf;
					}
					mux4x1:5:(0,0):(3): mux4x1.gdf;
					arithmeticlayer:6:(0,0):(8): arithmeticlayer.gdf
					{
						fulladder:7:(0,0):(12): fulladder.gdf;
						mux4x1:5:(0,0):(6): mux4x1.gdf;
						zero:8:(0,0):(3): zero.tdf
						{
							lpm_constant:9:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
						}
					}
				}
				alulayer:3:(0,0):(23): alulayer.gdf
				{
					logiclayer:4:(0,0):(2): logiclayer.gdf
					{
						mux4x1:5:(0,0):(2): mux4x1.gdf;
					}
					mux4x1:5:(0,0):(3): mux4x1.gdf;
					arithmeticlayer:6:(0,0):(8): arithmeticlayer.gdf
					{
						fulladder:7:(0,0):(12): fulladder.gdf;
						mux4x1:5:(0,0):(6): mux4x1.gdf;
						zero:8:(0,0):(3): zero.tdf
						{
							lpm_constant:9:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
						}
					}
				}
				alulayer:3:(0,0):(20): alulayer.gdf
				{
					logiclayer:4:(0,0):(2): logiclayer.gdf
					{
						mux4x1:5:(0,0):(2): mux4x1.gdf;
					}
					mux4x1:5:(0,0):(3): mux4x1.gdf;
					arithmeticlayer:6:(0,0):(8): arithmeticlayer.gdf
					{
						fulladder:7:(0,0):(12): fulladder.gdf;
						mux4x1:5:(0,0):(6): mux4x1.gdf;
						zero:8:(0,0):(3): zero.tdf
						{
							lpm_constant:9:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
						}
					}
				}
				alulayer:3:(0,0):(15): alulayer.gdf
				{
					logiclayer:4:(0,0):(2): logiclayer.gdf
					{
						mux4x1:5:(0,0):(2): mux4x1.gdf;
					}
					mux4x1:5:(0,0):(3): mux4x1.gdf;
					arithmeticlayer:6:(0,0):(8): arithmeticlayer.gdf
					{
						fulladder:7:(0,0):(12): fulladder.gdf;
						mux4x1:5:(0,0):(6): mux4x1.gdf;
						zero:8:(0,0):(3): zero.tdf
						{
							lpm_constant:9:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
						}
					}
				}
				zero:8:(0,0):(113): zero.tdf
				{
					lpm_constant:9:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
				}
				zero:8:(0,0):(114): zero.tdf
				{
					lpm_constant:9:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
				}
			}
			ar:10:(0,0):(2): ar.gdf
			{
				4bitregister:11:(0,0):(39): 4bitregister.gdf
				{
					ha:12:(0,0):(58): ha.gdf;
					ha:12:(0,0):(59): ha.gdf;
					ha:12:(0,0):(60): ha.gdf;
					ha:12:(0,0):(61): ha.gdf;
					mux2x1:13:(0,0):(54): mux2x1.gdf;
					mux2x1:13:(0,0):(55): mux2x1.gdf;
					mux2x1:13:(0,0):(56): mux2x1.gdf;
					mux2x1:13:(0,0):(57): mux2x1.gdf;
					d:14:(0,0):(50): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(51): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(52): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(53): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
				}
				4bitregister:11:(0,0):(40): 4bitregister.gdf
				{
					ha:12:(0,0):(58): ha.gdf;
					ha:12:(0,0):(59): ha.gdf;
					ha:12:(0,0):(60): ha.gdf;
					ha:12:(0,0):(61): ha.gdf;
					mux2x1:13:(0,0):(54): mux2x1.gdf;
					mux2x1:13:(0,0):(55): mux2x1.gdf;
					mux2x1:13:(0,0):(56): mux2x1.gdf;
					mux2x1:13:(0,0):(57): mux2x1.gdf;
					d:14:(0,0):(50): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(51): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(52): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(53): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
				}
				4bitregister:11:(0,0):(41): 4bitregister.gdf
				{
					ha:12:(0,0):(58): ha.gdf;
					ha:12:(0,0):(59): ha.gdf;
					ha:12:(0,0):(60): ha.gdf;
					ha:12:(0,0):(61): ha.gdf;
					mux2x1:13:(0,0):(54): mux2x1.gdf;
					mux2x1:13:(0,0):(55): mux2x1.gdf;
					mux2x1:13:(0,0):(56): mux2x1.gdf;
					mux2x1:13:(0,0):(57): mux2x1.gdf;
					d:14:(0,0):(50): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(51): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(52): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(53): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
				}
			}
			pc:16:(0,0):(4): pc.gdf
			{
				4bitregister:11:(0,0):(30): 4bitregister.gdf
				{
					ha:12:(0,0):(58): ha.gdf;
					ha:12:(0,0):(59): ha.gdf;
					ha:12:(0,0):(60): ha.gdf;
					ha:12:(0,0):(61): ha.gdf;
					mux2x1:13:(0,0):(54): mux2x1.gdf;
					mux2x1:13:(0,0):(55): mux2x1.gdf;
					mux2x1:13:(0,0):(56): mux2x1.gdf;
					mux2x1:13:(0,0):(57): mux2x1.gdf;
					d:14:(0,0):(50): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(51): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(52): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(53): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
				}
				4bitregister:11:(0,0):(31): 4bitregister.gdf
				{
					ha:12:(0,0):(58): ha.gdf;
					ha:12:(0,0):(59): ha.gdf;
					ha:12:(0,0):(60): ha.gdf;
					ha:12:(0,0):(61): ha.gdf;
					mux2x1:13:(0,0):(54): mux2x1.gdf;
					mux2x1:13:(0,0):(55): mux2x1.gdf;
					mux2x1:13:(0,0):(56): mux2x1.gdf;
					mux2x1:13:(0,0):(57): mux2x1.gdf;
					d:14:(0,0):(50): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(51): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(52): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(53): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
				}
				4bitregister:11:(0,0):(32): 4bitregister.gdf
				{
					ha:12:(0,0):(58): ha.gdf;
					ha:12:(0,0):(59): ha.gdf;
					ha:12:(0,0):(60): ha.gdf;
					ha:12:(0,0):(61): ha.gdf;
					mux2x1:13:(0,0):(54): mux2x1.gdf;
					mux2x1:13:(0,0):(55): mux2x1.gdf;
					mux2x1:13:(0,0):(56): mux2x1.gdf;
					mux2x1:13:(0,0):(57): mux2x1.gdf;
					d:14:(0,0):(50): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(51): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(52): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(53): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
				}
			}
			dr:17:(0,0):(5): dr.gdf
			{
				4bitregister:11:(0,0):(1): 4bitregister.gdf
				{
					ha:12:(0,0):(58): ha.gdf;
					ha:12:(0,0):(59): ha.gdf;
					ha:12:(0,0):(60): ha.gdf;
					ha:12:(0,0):(61): ha.gdf;
					mux2x1:13:(0,0):(54): mux2x1.gdf;
					mux2x1:13:(0,0):(55): mux2x1.gdf;
					mux2x1:13:(0,0):(56): mux2x1.gdf;
					mux2x1:13:(0,0):(57): mux2x1.gdf;
					d:14:(0,0):(50): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(51): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(52): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(53): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
				}
				4bitregister:11:(0,0):(4): 4bitregister.gdf
				{
					ha:12:(0,0):(58): ha.gdf;
					ha:12:(0,0):(59): ha.gdf;
					ha:12:(0,0):(60): ha.gdf;
					ha:12:(0,0):(61): ha.gdf;
					mux2x1:13:(0,0):(54): mux2x1.gdf;
					mux2x1:13:(0,0):(55): mux2x1.gdf;
					mux2x1:13:(0,0):(56): mux2x1.gdf;
					mux2x1:13:(0,0):(57): mux2x1.gdf;
					d:14:(0,0):(50): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(51): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(52): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(53): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
				}
				4bitregister:11:(0,0):(3): 4bitregister.gdf
				{
					ha:12:(0,0):(58): ha.gdf;
					ha:12:(0,0):(59): ha.gdf;
					ha:12:(0,0):(60): ha.gdf;
					ha:12:(0,0):(61): ha.gdf;
					mux2x1:13:(0,0):(54): mux2x1.gdf;
					mux2x1:13:(0,0):(55): mux2x1.gdf;
					mux2x1:13:(0,0):(56): mux2x1.gdf;
					mux2x1:13:(0,0):(57): mux2x1.gdf;
					d:14:(0,0):(50): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(51): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(52): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(53): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
				}
				4bitregister:11:(0,0):(2): 4bitregister.gdf
				{
					ha:12:(0,0):(58): ha.gdf;
					ha:12:(0,0):(59): ha.gdf;
					ha:12:(0,0):(60): ha.gdf;
					ha:12:(0,0):(61): ha.gdf;
					mux2x1:13:(0,0):(54): mux2x1.gdf;
					mux2x1:13:(0,0):(55): mux2x1.gdf;
					mux2x1:13:(0,0):(56): mux2x1.gdf;
					mux2x1:13:(0,0):(57): mux2x1.gdf;
					d:14:(0,0):(50): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(51): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(52): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(53): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
				}
			}
			ac:18:(0,0):(9): ac.gdf
			{
				4bitregister:11:(0,0):(38): 4bitregister.gdf
				{
					ha:12:(0,0):(58): ha.gdf;
					ha:12:(0,0):(59): ha.gdf;
					ha:12:(0,0):(60): ha.gdf;
					ha:12:(0,0):(61): ha.gdf;
					mux2x1:13:(0,0):(54): mux2x1.gdf;
					mux2x1:13:(0,0):(55): mux2x1.gdf;
					mux2x1:13:(0,0):(56): mux2x1.gdf;
					mux2x1:13:(0,0):(57): mux2x1.gdf;
					d:14:(0,0):(50): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(51): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(52): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(53): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
				}
				4bitregister:11:(0,0):(39): 4bitregister.gdf
				{
					ha:12:(0,0):(58): ha.gdf;
					ha:12:(0,0):(59): ha.gdf;
					ha:12:(0,0):(60): ha.gdf;
					ha:12:(0,0):(61): ha.gdf;
					mux2x1:13:(0,0):(54): mux2x1.gdf;
					mux2x1:13:(0,0):(55): mux2x1.gdf;
					mux2x1:13:(0,0):(56): mux2x1.gdf;
					mux2x1:13:(0,0):(57): mux2x1.gdf;
					d:14:(0,0):(50): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(51): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(52): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(53): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
				}
				4bitregister:11:(0,0):(40): 4bitregister.gdf
				{
					ha:12:(0,0):(58): ha.gdf;
					ha:12:(0,0):(59): ha.gdf;
					ha:12:(0,0):(60): ha.gdf;
					ha:12:(0,0):(61): ha.gdf;
					mux2x1:13:(0,0):(54): mux2x1.gdf;
					mux2x1:13:(0,0):(55): mux2x1.gdf;
					mux2x1:13:(0,0):(56): mux2x1.gdf;
					mux2x1:13:(0,0):(57): mux2x1.gdf;
					d:14:(0,0):(50): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(51): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(52): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(53): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
				}
				4bitregister:11:(0,0):(41): 4bitregister.gdf
				{
					ha:12:(0,0):(58): ha.gdf;
					ha:12:(0,0):(59): ha.gdf;
					ha:12:(0,0):(60): ha.gdf;
					ha:12:(0,0):(61): ha.gdf;
					mux2x1:13:(0,0):(54): mux2x1.gdf;
					mux2x1:13:(0,0):(55): mux2x1.gdf;
					mux2x1:13:(0,0):(56): mux2x1.gdf;
					mux2x1:13:(0,0):(57): mux2x1.gdf;
					d:14:(0,0):(50): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(51): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(52): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(53): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
				}
			}
			ir:19:(0,0):(10): ir.gdf
			{
				4bitregister:11:(0,0):(37): 4bitregister.gdf
				{
					ha:12:(0,0):(58): ha.gdf;
					ha:12:(0,0):(59): ha.gdf;
					ha:12:(0,0):(60): ha.gdf;
					ha:12:(0,0):(61): ha.gdf;
					mux2x1:13:(0,0):(54): mux2x1.gdf;
					mux2x1:13:(0,0):(55): mux2x1.gdf;
					mux2x1:13:(0,0):(56): mux2x1.gdf;
					mux2x1:13:(0,0):(57): mux2x1.gdf;
					d:14:(0,0):(50): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(51): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(52): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(53): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
				}
				4bitregister:11:(0,0):(38): 4bitregister.gdf
				{
					ha:12:(0,0):(58): ha.gdf;
					ha:12:(0,0):(59): ha.gdf;
					ha:12:(0,0):(60): ha.gdf;
					ha:12:(0,0):(61): ha.gdf;
					mux2x1:13:(0,0):(54): mux2x1.gdf;
					mux2x1:13:(0,0):(55): mux2x1.gdf;
					mux2x1:13:(0,0):(56): mux2x1.gdf;
					mux2x1:13:(0,0):(57): mux2x1.gdf;
					d:14:(0,0):(50): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(51): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(52): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(53): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
				}
				4bitregister:11:(0,0):(39): 4bitregister.gdf
				{
					ha:12:(0,0):(58): ha.gdf;
					ha:12:(0,0):(59): ha.gdf;
					ha:12:(0,0):(60): ha.gdf;
					ha:12:(0,0):(61): ha.gdf;
					mux2x1:13:(0,0):(54): mux2x1.gdf;
					mux2x1:13:(0,0):(55): mux2x1.gdf;
					mux2x1:13:(0,0):(56): mux2x1.gdf;
					mux2x1:13:(0,0):(57): mux2x1.gdf;
					d:14:(0,0):(50): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(51): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(52): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(53): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
				}
				4bitregister:11:(0,0):(40): 4bitregister.gdf
				{
					ha:12:(0,0):(58): ha.gdf;
					ha:12:(0,0):(59): ha.gdf;
					ha:12:(0,0):(60): ha.gdf;
					ha:12:(0,0):(61): ha.gdf;
					mux2x1:13:(0,0):(54): mux2x1.gdf;
					mux2x1:13:(0,0):(55): mux2x1.gdf;
					mux2x1:13:(0,0):(56): mux2x1.gdf;
					mux2x1:13:(0,0):(57): mux2x1.gdf;
					d:14:(0,0):(50): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(51): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(52): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(53): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
				}
				zero:8:(0,0):(41): zero.tdf
				{
					lpm_constant:9:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
				}
			}
			tr:20:(0,0):(12): tr.gdf
			{
				4bitregister:11:(0,0):(37): 4bitregister.gdf
				{
					ha:12:(0,0):(58): ha.gdf;
					ha:12:(0,0):(59): ha.gdf;
					ha:12:(0,0):(60): ha.gdf;
					ha:12:(0,0):(61): ha.gdf;
					mux2x1:13:(0,0):(54): mux2x1.gdf;
					mux2x1:13:(0,0):(55): mux2x1.gdf;
					mux2x1:13:(0,0):(56): mux2x1.gdf;
					mux2x1:13:(0,0):(57): mux2x1.gdf;
					d:14:(0,0):(50): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(51): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(52): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(53): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
				}
				4bitregister:11:(0,0):(38): 4bitregister.gdf
				{
					ha:12:(0,0):(58): ha.gdf;
					ha:12:(0,0):(59): ha.gdf;
					ha:12:(0,0):(60): ha.gdf;
					ha:12:(0,0):(61): ha.gdf;
					mux2x1:13:(0,0):(54): mux2x1.gdf;
					mux2x1:13:(0,0):(55): mux2x1.gdf;
					mux2x1:13:(0,0):(56): mux2x1.gdf;
					mux2x1:13:(0,0):(57): mux2x1.gdf;
					d:14:(0,0):(50): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(51): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(52): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(53): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
				}
				4bitregister:11:(0,0):(39): 4bitregister.gdf
				{
					ha:12:(0,0):(58): ha.gdf;
					ha:12:(0,0):(59): ha.gdf;
					ha:12:(0,0):(60): ha.gdf;
					ha:12:(0,0):(61): ha.gdf;
					mux2x1:13:(0,0):(54): mux2x1.gdf;
					mux2x1:13:(0,0):(55): mux2x1.gdf;
					mux2x1:13:(0,0):(56): mux2x1.gdf;
					mux2x1:13:(0,0):(57): mux2x1.gdf;
					d:14:(0,0):(50): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(51): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(52): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(53): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
				}
				4bitregister:11:(0,0):(40): 4bitregister.gdf
				{
					ha:12:(0,0):(58): ha.gdf;
					ha:12:(0,0):(59): ha.gdf;
					ha:12:(0,0):(60): ha.gdf;
					ha:12:(0,0):(61): ha.gdf;
					mux2x1:13:(0,0):(54): mux2x1.gdf;
					mux2x1:13:(0,0):(55): mux2x1.gdf;
					mux2x1:13:(0,0):(56): mux2x1.gdf;
					mux2x1:13:(0,0):(57): mux2x1.gdf;
					d:14:(0,0):(50): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(51): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(52): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
					d:14:(0,0):(53): d.tdf
					{
						lpm_ff:15:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
					}
				}
			}
			mux8x1:21:(0,0):(21): mux8x1.gdf
			{
				mux4x1:5:(0,0):(13): mux4x1.gdf;
				mux4x1:5:(0,0):(12): mux4x1.gdf;
				mux2x1:13:(0,0):(14): mux2x1.gdf;
			}
			mux8x1:21:(0,0):(80): mux8x1.gdf
			{
				mux4x1:5:(0,0):(13): mux4x1.gdf;
				mux4x1:5:(0,0):(12): mux4x1.gdf;
				mux2x1:13:(0,0):(14): mux2x1.gdf;
			}
			mux8x1:21:(0,0):(82): mux8x1.gdf
			{
				mux4x1:5:(0,0):(13): mux4x1.gdf;
				mux4x1:5:(0,0):(12): mux4x1.gdf;
				mux2x1:13:(0,0):(14): mux2x1.gdf;
			}
			mux8x1:21:(0,0):(84): mux8x1.gdf
			{
				mux4x1:5:(0,0):(13): mux4x1.gdf;
				mux4x1:5:(0,0):(12): mux4x1.gdf;
				mux2x1:13:(0,0):(14): mux2x1.gdf;
			}
			mux8x1:21:(0,0):(86): mux8x1.gdf
			{
				mux4x1:5:(0,0):(13): mux4x1.gdf;
				mux4x1:5:(0,0):(12): mux4x1.gdf;
				mux2x1:13:(0,0):(14): mux2x1.gdf;
			}
			mux8x1:21:(0,0):(88): mux8x1.gdf
			{
				mux4x1:5:(0,0):(13): mux4x1.gdf;
				mux4x1:5:(0,0):(12): mux4x1.gdf;
				mux2x1:13:(0,0):(14): mux2x1.gdf;
			}
			mux8x1:21:(0,0):(90): mux8x1.gdf
			{
				mux4x1:5:(0,0):(13): mux4x1.gdf;
				mux4x1:5:(0,0):(12): mux4x1.gdf;
				mux2x1:13:(0,0):(14): mux2x1.gdf;
			}
			mux8x1:21:(0,0):(92): mux8x1.gdf
			{
				mux4x1:5:(0,0):(13): mux4x1.gdf;
				mux4x1:5:(0,0):(12): mux4x1.gdf;
				mux2x1:13:(0,0):(14): mux2x1.gdf;
			}
			mux8x1:21:(0,0):(94): mux8x1.gdf
			{
				mux4x1:5:(0,0):(13): mux4x1.gdf;
				mux4x1:5:(0,0):(12): mux4x1.gdf;
				mux2x1:13:(0,0):(14): mux2x1.gdf;
			}
			mux8x1:21:(0,0):(38): mux8x1.gdf
			{
				mux4x1:5:(0,0):(13): mux4x1.gdf;
				mux4x1:5:(0,0):(12): mux4x1.gdf;
				mux2x1:13:(0,0):(14): mux2x1.gdf;
			}
			mux8x1:21:(0,0):(40): mux8x1.gdf
			{
				mux4x1:5:(0,0):(13): mux4x1.gdf;
				mux4x1:5:(0,0):(12): mux4x1.gdf;
				mux2x1:13:(0,0):(14): mux2x1.gdf;
			}
			mux8x1:21:(0,0):(42): mux8x1.gdf
			{
				mux4x1:5:(0,0):(13): mux4x1.gdf;
				mux4x1:5:(0,0):(12): mux4x1.gdf;
				mux2x1:13:(0,0):(14): mux2x1.gdf;
			}
			mux8x1:21:(0,0):(44): mux8x1.gdf
			{
				mux4x1:5:(0,0):(13): mux4x1.gdf;
				mux4x1:5:(0,0):(12): mux4x1.gdf;
				mux2x1:13:(0,0):(14): mux2x1.gdf;
			}
			mux8x1:21:(0,0):(34): mux8x1.gdf
			{
				mux4x1:5:(0,0):(13): mux4x1.gdf;
				mux4x1:5:(0,0):(12): mux4x1.gdf;
				mux2x1:13:(0,0):(14): mux2x1.gdf;
			}
			mux8x1:21:(0,0):(36): mux8x1.gdf
			{
				mux4x1:5:(0,0):(13): mux4x1.gdf;
				mux4x1:5:(0,0):(12): mux4x1.gdf;
				mux2x1:13:(0,0):(14): mux2x1.gdf;
			}
			mux8x1:21:(0,0):(24): mux8x1.gdf
			{
				mux4x1:5:(0,0):(13): mux4x1.gdf;
				mux4x1:5:(0,0):(12): mux4x1.gdf;
				mux2x1:13:(0,0):(14): mux2x1.gdf;
			}
			compressor16:22:(0,0):(22): compressor16.v;
			compressor16:22:(0,0):(184): compressor16.v;
			extractor3:23:(0,0):(23): extractor3.v;
			extractor3:23:(0,0):(81): extractor3.v;
			extractor3:23:(0,0):(83): extractor3.v;
			extractor3:23:(0,0):(85): extractor3.v;
			extractor3:23:(0,0):(87): extractor3.v;
			extractor3:23:(0,0):(89): extractor3.v;
			extractor3:23:(0,0):(91): extractor3.v;
			extractor3:23:(0,0):(93): extractor3.v;
			extractor3:23:(0,0):(95): extractor3.v;
			extractor3:23:(0,0):(39): extractor3.v;
			extractor3:23:(0,0):(41): extractor3.v;
			extractor3:23:(0,0):(43): extractor3.v;
			extractor3:23:(0,0):(47): extractor3.v;
			extractor3:23:(0,0):(35): extractor3.v;
			extractor3:23:(0,0):(37): extractor3.v;
			extractor3:23:(0,0):(25): extractor3.v;
			compressor12:24:(0,0):(96): compressor12.v;
			extractor16:25:(0,0):(98): extractor16.v;
			extractor16:25:(0,0):(189): extractor16.v;
			extractor16:25:(0,0):(188): extractor16.v;
			extractor16:25:(0,0):(187): extractor16.v;
			extractor16:25:(0,0):(120): extractor16.v;
			extractor16:25:(0,0):(108): extractor16.v;
			extractor16:25:(0,0):(107): extractor16.v;
			extractor16:25:(0,0):(106): extractor16.v;
			zero:8:(0,0):(109): zero.tdf
			{
				lpm_constant:9:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
			}
			basic_ram:26:(0,0):(191): basic_ram.v
			{
				lpm_ram_dp:27:(53,0):(74,lpm_ram_dp_component): lpm_ram_dp.tdf
				{
					altdpram:28:(253,7):(89,sram): altdpram.tdf
					{
						lpm_decode:29:(210,4):(90,wdecoder): lpm_decode.tdf
						{
							altshift:30:(76,2):(34,external_latency_ffs): altshift.tdf;
						}
						lpm_mux:31:(212,4):(100,mux): lpm_mux.tdf
						{
							altshift:32:(89,2):(79,external_latency_ffs): altshift.tdf;
							muxlut:33:(182,21):(117): muxlut.tdf;
							muxlut:33:(182,21):(132): muxlut.tdf;
							muxlut:33:(182,21):(147): muxlut.tdf;
							muxlut:33:(182,21):(162): muxlut.tdf;
							muxlut:33:(182,21):(177): muxlut.tdf;
							muxlut:33:(182,21):(192): muxlut.tdf;
							muxlut:33:(182,21):(207): muxlut.tdf;
							muxlut:33:(182,21):(222): muxlut.tdf;
							muxlut:33:(182,21):(237): muxlut.tdf;
							muxlut:33:(182,21):(252): muxlut.tdf;
							muxlut:33:(182,21):(267): muxlut.tdf;
							muxlut:33:(182,21):(282): muxlut.tdf;
							muxlut:33:(182,21):(297): muxlut.tdf;
							muxlut:33:(182,21):(312): muxlut.tdf;
							muxlut:33:(182,21):(327): muxlut.tdf;
							muxlut:33:(182,21):(342): muxlut.tdf;
						}
					}
				}
			}
		}
		zero::(0,0):(2): zero.tdf
		{
			lpm_constant:9:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
		}
		compressor16::(0,0):(4): compressor16.v;
		extractor8::(0,0):(10): extractor8.v;
	}
}
