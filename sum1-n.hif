HIF003
--
-- Copyright (C) 1988-2002 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
	ac.gdf
	{
		ac [] []
		{
			9 [] [];
		}
	}
	alu.gdf
	{
		alu [] []
		{
			1 [] [];
		}
	}
	dr.gdf
	{
		dr [] []
		{
			15 [] [];
		}
	}
	zero.tdf
	{
		zero [USE_LPM_FOR_AHDL_OPERATORS] [lpm_constant.inc]
		{
			7 [USE_LPM_FOR_AHDL_OPERATORS=OFF] [result0];
			27 [USE_LPM_FOR_AHDL_OPERATORS=OFF] [];
		}
	}
	counter4.tdf
	{
		counter4 [USE_LPM_FOR_AHDL_OPERATORS] [lpm_counter.inc]
		{
			16 [USE_LPM_FOR_AHDL_OPERATORS=OFF] [sclr,clock,q3,q2,q1,q0];
		}
	}
	dec4x16.tdf
	{
		dec4x16 [USE_LPM_FOR_AHDL_OPERATORS] [lpm_decode.inc]
		{
			23 [USE_LPM_FOR_AHDL_OPERATORS=OFF] [data3,data2,data1,data0,eq0,eq1];
			28 [USE_LPM_FOR_AHDL_OPERATORS=OFF] [data3,data2,data1,data0,eq0,eq1,eq2];
			29 [USE_LPM_FOR_AHDL_OPERATORS=OFF] [data3,data2,data1,data0,eq0];
		}
	}
	alulayer.gdf
	{
		alulayer [] []
		{
			2 [] [];
		}
	}
	logiclayer.gdf
	{
		logiclayer [] []
		{
			3 [] [];
		}
	}
	mux4x1.gdf
	{
		mux4x1 [] []
		{
			4 [] [];
		}
	}
	arithmeticlayer.gdf
	{
		arithmeticlayer [] []
		{
			5 [] [];
		}
	}
	fulladder.gdf
	{
		fulladder [] []
		{
			6 [] [];
		}
	}
	lpm_constant.tdf
	{
		lpm_constant [LPM_CVALUE,LPM_WIDTH,USE_LPM_FOR_AHDL_OPERATORS] []
		{
			8 [LPM_CVALUE=0,LPM_WIDTH=1,USE_LPM_FOR_AHDL_OPERATORS=OFF] [result0];
			22 [LPM_CVALUE=0,LPM_WIDTH=4,USE_LPM_FOR_AHDL_OPERATORS=OFF] [];
		}
	}
	4bitregister.gdf
	{
		4bitregister [] []
		{
			10 [] [];
		}
	}
	ha.gdf
	{
		ha [] []
		{
			11 [] [];
		}
	}
	mux2x1.gdf
	{
		mux2x1 [] []
		{
			12 [] [];
		}
	}
	d.tdf
	{
		d [USE_LPM_FOR_AHDL_OPERATORS] [lpm_ff.inc]
		{
			13 [USE_LPM_FOR_AHDL_OPERATORS=OFF] [sclr,data,clock,enable,q];
		}
	}
	lpm_ff.tdf
	{
		lpm_ff [DEVICE_FAMILY,LPM_FFTYPE=DFF,LPM_SVALUE=0,LPM_AVALUE=0,LPM_WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [lpm_constant.inc,aglobal.inc]
		{
			14 [DEVICE_FAMILY=ACEX1K,LPM_FFTYPE=DFF,LPM_SVALUE=0,LPM_AVALUE=0,LPM_WIDTH=1,USE_LPM_FOR_AHDL_OPERATORS=OFF] [sclr,enable,clock,data0,q0];
		}
	}
	lpm_counter.tdf
	{
		lpm_counter [LABWIDE_SCLR=ON,CARRY_CNT_EN=SMART,NOT_GATE_PUSH_BACK=OFF,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,DEVICE_FAMILY,LPM_SVALUE=0,LPM_AVALUE=0,LPM_MODULUS=0,LPM_DIRECTION=DEFAULT,LPM_WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [lpm_constant.inc,lpm_decode.inc,lpm_add_sub.inc,cmpconst.inc,lpm_compare.inc,lpm_counter.inc,dffeea.inc,aglobal.inc]
		{
			17 [LABWIDE_SCLR=ON,CARRY_CNT_EN=SMART,NOT_GATE_PUSH_BACK=ON,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,DEVICE_FAMILY=ACEX1K,LPM_SVALUE=0,LPM_AVALUE=0,LPM_MODULUS=0,LPM_DIRECTION=UP,LPM_WIDTH=4,USE_LPM_FOR_AHDL_OPERATORS=OFF] [sclr,clock,q0,q1,q2,q3];
		}
	}
	lpm_add_sub.tdf
	{
		lpm_add_sub [STYLE,DEVICE_FAMILY,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,OPTIMIZE_FOR_SPEED=5,MAXIMIZE_SPEED=5,LPM_PIPELINE=0,ONE_INPUT_IS_CONSTANT=NO,LPM_DIRECTION=DEFAULT,LPM_REPRESENTATION=SIGNED,LPM_WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [lpm_add_sub.inc,addcore.inc,look_add.inc,bypassff.inc,altshift.inc,aglobal.inc]
		{
			18 [STYLE=NORMAL,DEVICE_FAMILY=ACEX1K,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,OPTIMIZE_FOR_SPEED=5,MAXIMIZE_SPEED=5,LPM_PIPELINE=0,ONE_INPUT_IS_CONSTANT=YES,LPM_DIRECTION=ADD,LPM_REPRESENTATION=SIGNED,LPM_WIDTH=4,USE_LPM_FOR_AHDL_OPERATORS=OFF] [datab0,datab1,datab2,datab3,dataa0,dataa1,dataa2,dataa3,cout,result0,result1,result2,result3];
		}
	}
	addcore.tdf
	{
		addcore [DEVICE_FAMILY,CARRY_CHAIN_LENGTH,CARRY_CHAIN,CONSTANT_CIN,width,USE_LPM_FOR_AHDL_OPERATORS] [addcore.inc,aglobal.inc]
		{
			19 [DEVICE_FAMILY=ACEX1K,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,CONSTANT_CIN=1,width=4,USE_LPM_FOR_AHDL_OPERATORS=OFF] [cin,datab0,datab1,datab2,datab3,dataa0,dataa1,dataa2,dataa3,cout,result0,result1,result2,result3];
		}
	}
	altshift.tdf
	{
		altshift [DEPTH=0,WIDTH=4,USE_LPM_FOR_AHDL_OPERATORS] []
		{
			20 [DEPTH=0,WIDTH=4,USE_LPM_FOR_AHDL_OPERATORS=OFF] [data0,data1,data2,data3,result0,result1,result2,result3];
			21 [DEPTH=0,WIDTH=1,USE_LPM_FOR_AHDL_OPERATORS=OFF] [data0,result0];
			25 [DEPTH=0,WIDTH=16,USE_LPM_FOR_AHDL_OPERATORS=OFF] [data0,data1,data2,data3,data4,data5,data6,data7,data8,data9,data10,data11,data12,data13,data14,data15,result0,result1,result2,result3,result4,result5,result6,result7,result8,result9,result10,result11,result12,result13,result14,result15];
		}
	}
	lpm_decode.tdf
	{
		lpm_decode [DEVICE_FAMILY,CASCADE_CHAIN=MANUAL,LPM_PIPELINE=0,LPM_DECODES,LPM_WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [declut.inc,altshift.inc,lpm_compare.inc,lpm_constant.inc,aglobal.inc]
		{
			24 [DEVICE_FAMILY=ACEX1K,CASCADE_CHAIN=IGNORE,LPM_PIPELINE=0,LPM_DECODES=16,LPM_WIDTH=4,USE_LPM_FOR_AHDL_OPERATORS=OFF] [data0,data1,data2,data3,eq0,eq1,eq2,eq3,eq4,eq5,eq6,eq7,eq8,eq9,eq10,eq11,eq12,eq13,eq14,eq15];
		}
	}
	declut.tdf
	{
		declut [LATENCY,TOT_LEVELS,STAGE,width,USE_LPM_FOR_AHDL_OPERATORS] [declut.inc,bypassff.inc]
		{
			26 [LATENCY=0,TOT_LEVELS=1,STAGE=0,width=3,USE_LPM_FOR_AHDL_OPERATORS=OFF] [enable,data0,data1,data2,eq0,eq1,eq2,eq3,eq4,eq5,eq6,eq7];
		}
	}
	sum1-n.gdf
	{
		sum1-n [] []
		{
			0 [] [];
		}
	}
}
TREE
{
	sum1-n::(0,0):(0): sum1-n.gdf
	{
		alu::(0,0):(1): alu.gdf
		{
			zero:7:(0,0):(114): zero.tdf
			{
				lpm_constant:8:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
			}
			zero:7:(0,0):(113): zero.tdf
			{
				lpm_constant:8:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
			}
			alulayer:2:(0,0):(15): alulayer.gdf
			{
				arithmeticlayer:5:(0,0):(8): arithmeticlayer.gdf
				{
					zero:7:(0,0):(3): zero.tdf
					{
						lpm_constant:8:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
					}
					mux4x1:4:(0,0):(6): mux4x1.gdf;
					fulladder:6:(0,0):(12): fulladder.gdf;
				}
				mux4x1:4:(0,0):(3): mux4x1.gdf;
				logiclayer:3:(0,0):(2): logiclayer.gdf
				{
					mux4x1:4:(0,0):(2): mux4x1.gdf;
				}
			}
			alulayer:2:(0,0):(20): alulayer.gdf
			{
				arithmeticlayer:5:(0,0):(8): arithmeticlayer.gdf
				{
					zero:7:(0,0):(3): zero.tdf
					{
						lpm_constant:8:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
					}
					mux4x1:4:(0,0):(6): mux4x1.gdf;
					fulladder:6:(0,0):(12): fulladder.gdf;
				}
				mux4x1:4:(0,0):(3): mux4x1.gdf;
				logiclayer:3:(0,0):(2): logiclayer.gdf
				{
					mux4x1:4:(0,0):(2): mux4x1.gdf;
				}
			}
			alulayer:2:(0,0):(23): alulayer.gdf
			{
				arithmeticlayer:5:(0,0):(8): arithmeticlayer.gdf
				{
					zero:7:(0,0):(3): zero.tdf
					{
						lpm_constant:8:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
					}
					mux4x1:4:(0,0):(6): mux4x1.gdf;
					fulladder:6:(0,0):(12): fulladder.gdf;
				}
				mux4x1:4:(0,0):(3): mux4x1.gdf;
				logiclayer:3:(0,0):(2): logiclayer.gdf
				{
					mux4x1:4:(0,0):(2): mux4x1.gdf;
				}
			}
			alulayer:2:(0,0):(77): alulayer.gdf
			{
				arithmeticlayer:5:(0,0):(8): arithmeticlayer.gdf
				{
					zero:7:(0,0):(3): zero.tdf
					{
						lpm_constant:8:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
					}
					mux4x1:4:(0,0):(6): mux4x1.gdf;
					fulladder:6:(0,0):(12): fulladder.gdf;
				}
				mux4x1:4:(0,0):(3): mux4x1.gdf;
				logiclayer:3:(0,0):(2): logiclayer.gdf
				{
					mux4x1:4:(0,0):(2): mux4x1.gdf;
				}
			}
			alulayer:2:(0,0):(73): alulayer.gdf
			{
				arithmeticlayer:5:(0,0):(8): arithmeticlayer.gdf
				{
					zero:7:(0,0):(3): zero.tdf
					{
						lpm_constant:8:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
					}
					mux4x1:4:(0,0):(6): mux4x1.gdf;
					fulladder:6:(0,0):(12): fulladder.gdf;
				}
				mux4x1:4:(0,0):(3): mux4x1.gdf;
				logiclayer:3:(0,0):(2): logiclayer.gdf
				{
					mux4x1:4:(0,0):(2): mux4x1.gdf;
				}
			}
			alulayer:2:(0,0):(69): alulayer.gdf
			{
				arithmeticlayer:5:(0,0):(8): arithmeticlayer.gdf
				{
					zero:7:(0,0):(3): zero.tdf
					{
						lpm_constant:8:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
					}
					mux4x1:4:(0,0):(6): mux4x1.gdf;
					fulladder:6:(0,0):(12): fulladder.gdf;
				}
				mux4x1:4:(0,0):(3): mux4x1.gdf;
				logiclayer:3:(0,0):(2): logiclayer.gdf
				{
					mux4x1:4:(0,0):(2): mux4x1.gdf;
				}
			}
			alulayer:2:(0,0):(64): alulayer.gdf
			{
				arithmeticlayer:5:(0,0):(8): arithmeticlayer.gdf
				{
					zero:7:(0,0):(3): zero.tdf
					{
						lpm_constant:8:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
					}
					mux4x1:4:(0,0):(6): mux4x1.gdf;
					fulladder:6:(0,0):(12): fulladder.gdf;
				}
				mux4x1:4:(0,0):(3): mux4x1.gdf;
				logiclayer:3:(0,0):(2): logiclayer.gdf
				{
					mux4x1:4:(0,0):(2): mux4x1.gdf;
				}
			}
			alulayer:2:(0,0):(108): alulayer.gdf
			{
				arithmeticlayer:5:(0,0):(8): arithmeticlayer.gdf
				{
					zero:7:(0,0):(3): zero.tdf
					{
						lpm_constant:8:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
					}
					mux4x1:4:(0,0):(6): mux4x1.gdf;
					fulladder:6:(0,0):(12): fulladder.gdf;
				}
				mux4x1:4:(0,0):(3): mux4x1.gdf;
				logiclayer:3:(0,0):(2): logiclayer.gdf
				{
					mux4x1:4:(0,0):(2): mux4x1.gdf;
				}
			}
			alulayer:2:(0,0):(104): alulayer.gdf
			{
				arithmeticlayer:5:(0,0):(8): arithmeticlayer.gdf
				{
					zero:7:(0,0):(3): zero.tdf
					{
						lpm_constant:8:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
					}
					mux4x1:4:(0,0):(6): mux4x1.gdf;
					fulladder:6:(0,0):(12): fulladder.gdf;
				}
				mux4x1:4:(0,0):(3): mux4x1.gdf;
				logiclayer:3:(0,0):(2): logiclayer.gdf
				{
					mux4x1:4:(0,0):(2): mux4x1.gdf;
				}
			}
			alulayer:2:(0,0):(96): alulayer.gdf
			{
				arithmeticlayer:5:(0,0):(8): arithmeticlayer.gdf
				{
					zero:7:(0,0):(3): zero.tdf
					{
						lpm_constant:8:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
					}
					mux4x1:4:(0,0):(6): mux4x1.gdf;
					fulladder:6:(0,0):(12): fulladder.gdf;
				}
				mux4x1:4:(0,0):(3): mux4x1.gdf;
				logiclayer:3:(0,0):(2): logiclayer.gdf
				{
					mux4x1:4:(0,0):(2): mux4x1.gdf;
				}
			}
			alulayer:2:(0,0):(92): alulayer.gdf
			{
				arithmeticlayer:5:(0,0):(8): arithmeticlayer.gdf
				{
					zero:7:(0,0):(3): zero.tdf
					{
						lpm_constant:8:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
					}
					mux4x1:4:(0,0):(6): mux4x1.gdf;
					fulladder:6:(0,0):(12): fulladder.gdf;
				}
				mux4x1:4:(0,0):(3): mux4x1.gdf;
				logiclayer:3:(0,0):(2): logiclayer.gdf
				{
					mux4x1:4:(0,0):(2): mux4x1.gdf;
				}
			}
			alulayer:2:(0,0):(88): alulayer.gdf
			{
				arithmeticlayer:5:(0,0):(8): arithmeticlayer.gdf
				{
					zero:7:(0,0):(3): zero.tdf
					{
						lpm_constant:8:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
					}
					mux4x1:4:(0,0):(6): mux4x1.gdf;
					fulladder:6:(0,0):(12): fulladder.gdf;
				}
				mux4x1:4:(0,0):(3): mux4x1.gdf;
				logiclayer:3:(0,0):(2): logiclayer.gdf
				{
					mux4x1:4:(0,0):(2): mux4x1.gdf;
				}
			}
			alulayer:2:(0,0):(84): alulayer.gdf
			{
				arithmeticlayer:5:(0,0):(8): arithmeticlayer.gdf
				{
					zero:7:(0,0):(3): zero.tdf
					{
						lpm_constant:8:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
					}
					mux4x1:4:(0,0):(6): mux4x1.gdf;
					fulladder:6:(0,0):(12): fulladder.gdf;
				}
				mux4x1:4:(0,0):(3): mux4x1.gdf;
				logiclayer:3:(0,0):(2): logiclayer.gdf
				{
					mux4x1:4:(0,0):(2): mux4x1.gdf;
				}
			}
			alulayer:2:(0,0):(100): alulayer.gdf
			{
				arithmeticlayer:5:(0,0):(8): arithmeticlayer.gdf
				{
					zero:7:(0,0):(3): zero.tdf
					{
						lpm_constant:8:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
					}
					mux4x1:4:(0,0):(6): mux4x1.gdf;
					fulladder:6:(0,0):(12): fulladder.gdf;
				}
				mux4x1:4:(0,0):(3): mux4x1.gdf;
				logiclayer:3:(0,0):(2): logiclayer.gdf
				{
					mux4x1:4:(0,0):(2): mux4x1.gdf;
				}
			}
			alulayer:2:(0,0):(1): alulayer.gdf
			{
				arithmeticlayer:5:(0,0):(8): arithmeticlayer.gdf
				{
					zero:7:(0,0):(3): zero.tdf
					{
						lpm_constant:8:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
					}
					mux4x1:4:(0,0):(6): mux4x1.gdf;
					fulladder:6:(0,0):(12): fulladder.gdf;
				}
				mux4x1:4:(0,0):(3): mux4x1.gdf;
				logiclayer:3:(0,0):(2): logiclayer.gdf
				{
					mux4x1:4:(0,0):(2): mux4x1.gdf;
				}
			}
			alulayer:2:(0,0):(80): alulayer.gdf
			{
				arithmeticlayer:5:(0,0):(8): arithmeticlayer.gdf
				{
					zero:7:(0,0):(3): zero.tdf
					{
						lpm_constant:8:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
					}
					mux4x1:4:(0,0):(6): mux4x1.gdf;
					fulladder:6:(0,0):(12): fulladder.gdf;
				}
				mux4x1:4:(0,0):(3): mux4x1.gdf;
				logiclayer:3:(0,0):(2): logiclayer.gdf
				{
					mux4x1:4:(0,0):(2): mux4x1.gdf;
				}
			}
		}
		ac::(0,0):(2): ac.gdf
		{
			4bitregister:10:(0,0):(41): 4bitregister.gdf
			{
				d:13:(0,0):(53): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				d:13:(0,0):(52): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				d:13:(0,0):(51): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				d:13:(0,0):(50): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				mux2x1:12:(0,0):(57): mux2x1.gdf;
				mux2x1:12:(0,0):(56): mux2x1.gdf;
				mux2x1:12:(0,0):(55): mux2x1.gdf;
				mux2x1:12:(0,0):(54): mux2x1.gdf;
				ha:11:(0,0):(61): ha.gdf;
				ha:11:(0,0):(60): ha.gdf;
				ha:11:(0,0):(59): ha.gdf;
				ha:11:(0,0):(58): ha.gdf;
			}
			4bitregister:10:(0,0):(40): 4bitregister.gdf
			{
				d:13:(0,0):(53): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				d:13:(0,0):(52): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				d:13:(0,0):(51): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				d:13:(0,0):(50): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				mux2x1:12:(0,0):(57): mux2x1.gdf;
				mux2x1:12:(0,0):(56): mux2x1.gdf;
				mux2x1:12:(0,0):(55): mux2x1.gdf;
				mux2x1:12:(0,0):(54): mux2x1.gdf;
				ha:11:(0,0):(61): ha.gdf;
				ha:11:(0,0):(60): ha.gdf;
				ha:11:(0,0):(59): ha.gdf;
				ha:11:(0,0):(58): ha.gdf;
			}
			4bitregister:10:(0,0):(39): 4bitregister.gdf
			{
				d:13:(0,0):(53): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				d:13:(0,0):(52): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				d:13:(0,0):(51): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				d:13:(0,0):(50): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				mux2x1:12:(0,0):(57): mux2x1.gdf;
				mux2x1:12:(0,0):(56): mux2x1.gdf;
				mux2x1:12:(0,0):(55): mux2x1.gdf;
				mux2x1:12:(0,0):(54): mux2x1.gdf;
				ha:11:(0,0):(61): ha.gdf;
				ha:11:(0,0):(60): ha.gdf;
				ha:11:(0,0):(59): ha.gdf;
				ha:11:(0,0):(58): ha.gdf;
			}
			4bitregister:10:(0,0):(38): 4bitregister.gdf
			{
				d:13:(0,0):(53): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				d:13:(0,0):(52): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				d:13:(0,0):(51): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				d:13:(0,0):(50): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				mux2x1:12:(0,0):(57): mux2x1.gdf;
				mux2x1:12:(0,0):(56): mux2x1.gdf;
				mux2x1:12:(0,0):(55): mux2x1.gdf;
				mux2x1:12:(0,0):(54): mux2x1.gdf;
				ha:11:(0,0):(61): ha.gdf;
				ha:11:(0,0):(60): ha.gdf;
				ha:11:(0,0):(59): ha.gdf;
				ha:11:(0,0):(58): ha.gdf;
			}
		}
		dr::(0,0):(3): dr.gdf
		{
			4bitregister:10:(0,0):(2): 4bitregister.gdf
			{
				d:13:(0,0):(53): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				d:13:(0,0):(52): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				d:13:(0,0):(51): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				d:13:(0,0):(50): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				mux2x1:12:(0,0):(57): mux2x1.gdf;
				mux2x1:12:(0,0):(56): mux2x1.gdf;
				mux2x1:12:(0,0):(55): mux2x1.gdf;
				mux2x1:12:(0,0):(54): mux2x1.gdf;
				ha:11:(0,0):(61): ha.gdf;
				ha:11:(0,0):(60): ha.gdf;
				ha:11:(0,0):(59): ha.gdf;
				ha:11:(0,0):(58): ha.gdf;
			}
			4bitregister:10:(0,0):(3): 4bitregister.gdf
			{
				d:13:(0,0):(53): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				d:13:(0,0):(52): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				d:13:(0,0):(51): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				d:13:(0,0):(50): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				mux2x1:12:(0,0):(57): mux2x1.gdf;
				mux2x1:12:(0,0):(56): mux2x1.gdf;
				mux2x1:12:(0,0):(55): mux2x1.gdf;
				mux2x1:12:(0,0):(54): mux2x1.gdf;
				ha:11:(0,0):(61): ha.gdf;
				ha:11:(0,0):(60): ha.gdf;
				ha:11:(0,0):(59): ha.gdf;
				ha:11:(0,0):(58): ha.gdf;
			}
			4bitregister:10:(0,0):(4): 4bitregister.gdf
			{
				d:13:(0,0):(53): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				d:13:(0,0):(52): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				d:13:(0,0):(51): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				d:13:(0,0):(50): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				mux2x1:12:(0,0):(57): mux2x1.gdf;
				mux2x1:12:(0,0):(56): mux2x1.gdf;
				mux2x1:12:(0,0):(55): mux2x1.gdf;
				mux2x1:12:(0,0):(54): mux2x1.gdf;
				ha:11:(0,0):(61): ha.gdf;
				ha:11:(0,0):(60): ha.gdf;
				ha:11:(0,0):(59): ha.gdf;
				ha:11:(0,0):(58): ha.gdf;
			}
			4bitregister:10:(0,0):(1): 4bitregister.gdf
			{
				d:13:(0,0):(53): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				d:13:(0,0):(52): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				d:13:(0,0):(51): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				d:13:(0,0):(50): d.tdf
				{
					lpm_ff:14:(52,2):(32,lpm_ff_component): lpm_ff.tdf;
				}
				mux2x1:12:(0,0):(57): mux2x1.gdf;
				mux2x1:12:(0,0):(56): mux2x1.gdf;
				mux2x1:12:(0,0):(55): mux2x1.gdf;
				mux2x1:12:(0,0):(54): mux2x1.gdf;
				ha:11:(0,0):(61): ha.gdf;
				ha:11:(0,0):(60): ha.gdf;
				ha:11:(0,0):(59): ha.gdf;
				ha:11:(0,0):(58): ha.gdf;
			}
		}
		zero::(0,0):(4): zero.tdf
		{
			lpm_constant:8:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
		}
		counter4::(0,0):(44): counter4.tdf
		{
			lpm_counter:17:(50,2):(33,lpm_counter_component): lpm_counter.tdf
			{
				lpm_constant:22:(318,6):(88,scdw): lpm_constant.tdf;
				lpm_add_sub:18:(298,7):(65,add_sub): lpm_add_sub.tdf
				{
					altshift:21:(226,2):(87,oflow_ext_latency_ffs): altshift.tdf;
					altshift:21:(224,2):(79,carry_ext_latency_ffs): altshift.tdf;
					altshift:20:(222,2):(65,result_ext_latency_ffs): altshift.tdf;
					addcore:19:(212,4):(46,adder): addcore.tdf;
				}
			}
		}
		dec4x16::(0,0):(43): dec4x16.tdf
		{
			lpm_decode:24:(64,2):(47,lpm_decode_component): lpm_decode.tdf
			{
				declut:26:(101,5):(112,decoder1): declut.tdf;
				declut:26:(98,5):(89,decoder0): declut.tdf;
				altshift:25:(76,2):(51,external_latency_ffs): altshift.tdf;
			}
		}
		zero::(0,0):(86): zero.tdf
		{
			lpm_constant:8:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
		}
		zero::(0,0):(90): zero.tdf
		{
			lpm_constant:8:(48,2):(28,lpm_constant_component): lpm_constant.tdf;
		}
	}
}
